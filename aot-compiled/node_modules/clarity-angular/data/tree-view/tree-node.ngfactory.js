/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
import * as i0 from '@angular/core';
import * as i1 from 'clarity-angular/icon/icon';
import * as i2 from '../../forms/checkbox/checkbox.ngfactory';
import * as i3 from 'clarity-angular/forms/checkbox/checkbox';
import * as i4 from '@angular/forms';
import * as i5 from '@angular/common';
import * as i6 from 'clarity-angular/data/tree-view/tree-node';
import * as i7 from 'clarity-angular/utils/loading/loading-listener';
import * as i8 from 'clarity-angular/utils/expand/providers/expand';
import * as i9 from 'clarity-angular/data/tree-view/providers/tree-selection.service';
import * as i10 from 'clarity-angular/data/tree-view/providers/tree-selection.provider';
var styles_TreeNode = [];
export var RenderType_TreeNode = i0.ɵcrt({ encapsulation: 2, styles: styles_TreeNode,
    data: { 'animation': [{ type: 7, name: 'childNodesState', definitions: [{ type: 0, name: 'expanded',
                        styles: { type: 6, styles: { 'height': '*', 'overflow-y': 'hidden' }, offset: null },
                        options: undefined }, { type: 0, name: 'collapsed', styles: { type: 6, styles: { 'height': 0,
                                'overflow-y': 'hidden' }, offset: null }, options: undefined }, { type: 1,
                        expr: 'expanded <=> collapsed', animation: { type: 4, styles: null, timings: '0.2s ease-in-out' },
                        options: null }], options: {} }] } });
function View_TreeNode_1(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 4, 'button', [['class',
                'clr-treenode-caret'], ['type', 'button']], null, [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                var pd_0 = (_co.toggleExpand() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), i0.ɵted(null, ['\n          '])),
        (_l()(), i0.ɵeld(0, null, null, 1, 'clr-icon', [['shape', 'caret']], [[1, 'dir', 0]], null, null, null, null)),
        i0.ɵdid(16384, null, 0, i1.IconCustomTag, [], null, null),
        (_l()(), i0.ɵted(null, ['\n      ']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.caretDirection;
        _ck(_v, 2, 0, currVal_0);
    });
}
function View_TreeNode_2(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 1, 'span', [['class',
                'clr-treenode-spinner spinner']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n          Loading...\n      ']))], null, null);
}
function View_TreeNode_3(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 5, 'clr-checkbox', [], [[2, 'checkbox', null], [2, 'checkbox-inline', null],
            [2, 'disabled', null], [2, 'ng-untouched', null], [2, 'ng-touched',
                null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
            [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                null]], [[null, 'ngModelChange'], [null, 'clrIndeterminateChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.selected = $event) !== false);
                ad = (pd_0 && ad);
            }
            if (('clrIndeterminateChange' === en)) {
                var pd_1 = ((_co.indeterminate = $event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, i2.View_Checkbox_0, i2.RenderType_Checkbox)), i0.ɵdid(49152, null, 0, i3.Checkbox, [], { indeterminate: [0, 'indeterminate'] }, { indeterminateChange: 'clrIndeterminateChange' }),
        i0.ɵprd(1024, null, i4.NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [i3.Checkbox]), i0.ɵdid(671744, null, 0, i4.NgModel, [[8, null],
            [8, null], [8, null], [2, i4.NG_VALUE_ACCESSOR]], { model: [0,
                'model'] }, { update: 'ngModelChange' }), i0.ɵprd(2048, null, i4.NgControl, null, [i4.NgModel]), i0.ɵdid(16384, null, 0, i4.NgControlStatus, [i4.NgControl], null, null)], function (_ck, _v) {
        var _co = _v.component;
        var currVal_10 = _co.indeterminate;
        _ck(_v, 1, 0, currVal_10);
        var currVal_11 = _co.selected;
        _ck(_v, 3, 0, currVal_11);
    }, function (_ck, _v) {
        var currVal_0 = !i0.ɵnov(_v, 1).inline;
        var currVal_1 = i0.ɵnov(_v, 1).inline;
        var currVal_2 = i0.ɵnov(_v, 1).disabled;
        var currVal_3 = i0.ɵnov(_v, 5).ngClassUntouched;
        var currVal_4 = i0.ɵnov(_v, 5).ngClassTouched;
        var currVal_5 = i0.ɵnov(_v, 5).ngClassPristine;
        var currVal_6 = i0.ɵnov(_v, 5).ngClassDirty;
        var currVal_7 = i0.ɵnov(_v, 5).ngClassValid;
        var currVal_8 = i0.ɵnov(_v, 5).ngClassInvalid;
        var currVal_9 = i0.ɵnov(_v, 5).ngClassPending;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9);
    });
}
export function View_TreeNode_0(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TreeNode_1)), i0.ɵdid(16384, null, 0, i5.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TreeNode_2)), i0.ɵdid(16384, null, 0, i5.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_TreeNode_3)), i0.ɵdid(16384, null, 0, i5.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, 'ngIf'] }, null), (_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵeld(0, null, null, 3, 'div', [['class', 'clr-treenode-content']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n          '])), i0.ɵncd(null, 0), (_l()(), i0.ɵted(null, ['\n      '])),
        (_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵted(null, ['\n      '])),
        (_l()(), i0.ɵeld(0, null, null, 5, 'div', [['class', 'clr-treenode-children']], [[24, '@childNodesState', 0]], null, null, null, null)),
        (_l()(), i0.ɵted(null, ['\n          '])), i0.ɵncd(null, 1), (_l()(),
            i0.ɵted(null, ['\n          '])), i0.ɵncd(null, 2), (_l()(),
            i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵted(null, ['\n    ']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = (_co.nodeExpand.expandable && !_co.nodeExpand.loading);
        _ck(_v, 2, 0, currVal_0);
        var currVal_1 = (_co.nodeExpand.expandable && _co.nodeExpand.loading);
        _ck(_v, 5, 0, currVal_1);
        var currVal_2 = _co.selectable;
        _ck(_v, 8, 0, currVal_2);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_3 = _co.state;
        _ck(_v, 16, 0, currVal_3);
    });
}
export function View_TreeNode_Host_0(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 4, 'clr-tree-node', [], null, null, null, View_TreeNode_0, RenderType_TreeNode)),
        i0.ɵprd(6144, null, i7.LoadingListener, null, [i8.Expand]), i0.ɵprd(512, null, i8.Expand, i8.Expand, []), i0.ɵprd(1024, null, i9.TreeSelectionService, i10.clrTreeSelectionProviderFactory, [[3, i9.TreeSelectionService]]),
        i0.ɵdid(180224, null, 0, i6.TreeNode, [i8.Expand, [3, i6.TreeNode], i9.TreeSelectionService], null, null)], null, null);
}
export var TreeNodeNgFactory = i0.ɵccf('clr-tree-node', i6.TreeNode, View_TreeNode_Host_0, { nodeSelected: 'clrSelected', nodeIndeterminate: 'clrIndeterminate' }, { nodeSelectedChange: 'clrSelectedChange', nodeIndeterminateChanged: 'clrIndeterminateChange' }, ['*', 'clr-tree-node', '[clrIfExpanded]']);
//# sourceMappingURL=tree-node.ngfactory.js.map